@using SQuiz.Client.Shared.Components
@using SQuiz.Shared.Dtos.Quiz
@using SQuiz.Shared.Extensions
@using MudBlazor.Utilities

<StepItem Title="Manage Questions" Order="2">
    <MovableList 
        Items="Model.Questions"
        AddItemDelegate="AddItemDelegate"
        Header="Questions"
        OnAdd="new EventCallback<QuestionDto>(this, OnAdd)"
        OnReorder="new EventCallback<(int, int)>(this, OnReorder)"
        OnRemove="new EventCallback<QuestionDto>(this, OnRemove)">
        <ItemTemplate Context="question">
            <MudText Class="pa-1">@question.QuestionText</MudText>
        </ItemTemplate>
        <MenuActions Context="question">
            <MudMenuItem 
                Icon="@Icons.Material.Filled.Edit"
                @onclick=@(() => NavigateToEditQuestion(question))
                OnTouch=@(() => NavigateToEditQuestion(question))>Edit</MudMenuItem>
        </MenuActions>
    </MovableList>
</StepItem>

@code {
    private const int QUESTION_START_INDEX = 3;

    [CascadingParameter]
    public QuizSteps Parent { get; set; }

    [Parameter]
    public QuestionDto Question { get; set; }

    public EditQuizDto Model => Parent.Model;

    public EditQuizDto? InitialModel => Parent.InitialModel;

    void OnRemove(QuestionDto question)
    {
        Parent.RemoveByIndex(Model.Questions.Count + QUESTION_START_INDEX);
    }

    void OnAdd(QuestionDto question)
    {
        Parent.Rerender();
    }

    void OnReorder((int, int) e)
    {
        Parent.Validate();
        Parent.Rerender();
    }

    QuestionDto AddItemDelegate()
    {
        return new QuestionDto()
        {
            QuestionText = "New question",
            Order = Model.Questions.Count,
            Answers = new List<AnswerDto>()
            {
                new AnswerDto() { Order = 0 },
                new AnswerDto() { Order = 1 }
            }
        };
    }

    public void NavigateToEditQuestion(QuestionDto question) 
    {
        var questionIndex = Model.Questions.IndexOf(question);
        Parent.NavigateTo(questionIndex + QUESTION_START_INDEX);
    }

    protected override void OnAfterRender(bool isFirst)
    {
        Model.Questions.Sort((a, b) => a.Order - b.Order);
    }
}