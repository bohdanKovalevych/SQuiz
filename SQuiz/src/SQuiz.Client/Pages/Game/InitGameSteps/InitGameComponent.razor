@using Microsoft.AspNetCore.WebUtilities
@using SQuiz.Client.Interfaces
@using SQuiz.Client.Services
@using SQuiz.Client.Services.JoinGameStrategies
@using SQuiz.Shared.Dtos.Game
@using System.Net
@using System.Text.Json
@inject IInitGameService InitGameService
@inject PublicClient Http
@inject NavigationManager Nav
@inject ISessionStorageService SessionStorage
@inject IJoinGameProcessor JoinGameProcessor

@implements IDisposable

<Steps Title="Play quiz" @ref="Steps" Class="@Class">
    <SubHeaderContent>
        <p class="red-text">@ErrorMessage</p>
    </SubHeaderContent>
    <ChildContent>
        <StepItem Title="Write code">
            <ChooseGameByCodeStep></ChooseGameByCodeStep>
        </StepItem>
        @if (Game != null)
        {
            <StepItem Title="Write name">
                <JoinGameStep Game="Game"></JoinGameStep>
            </StepItem>
        }
    </ChildContent>
</Steps>

@code {
    const string GAME_CODE_KEY = "game";
    Func<JoinGameDto, Task<string?>>? _joinGameDelegate;
    public Steps? Steps { get; set; }
    public GameOptionDto? Game { get; set; }
    public string? ErrorMessage;

    [Parameter]
    public string? Class { get; set; }

    protected override void OnInitialized()
    {
        InitGameService.PlayerNameChosen += PlayerNameChosen;
        InitGameService.GameCodeChosen += GameCodeChosen;
        InitGameService.JoinedWithExistingId += PlayerJoinedWithExistingId;
        InitFromQuery();
    }

    void InitFromQuery()
    {
        var uri = new Uri(Nav.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue(GAME_CODE_KEY, out var gameCodeStrings) 
            && gameCodeStrings.Any()
            && gameCodeStrings[0] is string gameCodeString
            && int.TryParse(gameCodeString, out int gameCode))
        {
            InitGameService.ChooseGameCode(gameCode);
        }
    }

    public async Task GameCodeChosen(int code)
    {
        ErrorMessage = null;
        int navigateToIndex = 0;

        try {

            var result = await Http.Client.GetAsync($"Games/{code}");
            var className = result.Headers.GetValues(Constants.HeadersKey.ResponseEntityType)?.First();

            if (className == typeof(RealtimeGameOptionDto).FullName)
            {
                Game = await result.Content.ReadFromJsonAsync<RealtimeGameOptionDto>();
                _joinGameDelegate = dto => JoinGameProcessor.JoinGame<RealtimeGameOptionDto>(dto);
            }
            else if (className == typeof(RegularGameOptionDto).FullName)
            {
                Game = await result.Content.ReadFromJsonAsync<RegularGameOptionDto>();
                _joinGameDelegate = dto => JoinGameProcessor.JoinGame<RegularGameOptionDto>(dto);
            }

            if (Game?.IsBlocked ?? false)
            {
                ErrorMessage = $"Game by code {code} is blocked now";
                return;
            }

            navigateToIndex = 1;
            Nav.NavigateTo(Nav.GetUriWithQueryParameter(GAME_CODE_KEY, Game?.ShortId.ToString()));
            await SessionStorage.SetItemAsync(Constants.SessionStorageKey.Game, Game);
        }
        catch (Exception e)
        {
            ErrorMessage = $"Game was not found by code {code}";
            Steps?.RemoveByIndex(1);
            Game = null;
            await SessionStorage.RemoveItemAsync(Constants.SessionStorageKey.Game);
        }
        finally
        {
            StateHasChanged();
            Steps?.NavigateTo(navigateToIndex);
        }

    }

    public async Task PlayerNameChosen(string name)
    {
        if (_joinGameDelegate == null)
        {
            return;
        }

        var command = new JoinGameDto() { Name = name, ShortId = Game.ShortId };
        var errorMessage = await _joinGameDelegate(command);
        
        if (errorMessage != null)
        {
            ErrorMessage = errorMessage;
            StateHasChanged();
        }
    }

    public async Task PlayerJoinedWithExistingId(string id)
    {
        var result = await Http.Client.PostAsJsonAsync("Games/rejoin", id);

        if (result.StatusCode == HttpStatusCode.NotFound)
        {
            ErrorMessage = "User or game was not found";
            StateHasChanged();
            return;
        }

        if (!result.IsSuccessStatusCode)
        {
            ErrorMessage = await result.Content.ReadAsStringAsync();
            StateHasChanged();
            return;
        }

        Nav.NavigateTo("play/showGame");
    }

    public void Dispose()
    {
        InitGameService.PlayerNameChosen -= PlayerNameChosen;
        InitGameService.GameCodeChosen -= GameCodeChosen;
        InitGameService.JoinedWithExistingId -= PlayerJoinedWithExistingId;
    }
}