@using SQuiz.Client.Pages.Game.Animations
@using SQuiz.Client.Pages.Game.GameCoreComponents.Controls
@using SQuiz.Shared.Dtos.Game
@using SQuiz.Shared.Extensions
@using SQuiz.Shared.Interfaces

@implements IDisposable
@inject IPlayGameService PlayGameService

@if (!Hide)
{
    <LoadingWrapper WaitFor="_question">
        <PrepareForQuestionAnimation />
        <MudCard>
            <MudCardHeader Class="flex-column align-stretch gap-2">
                <PlayerStateControl AnsweredState="AnsweredState"
                                HidePlayerState="HidePlayerState"
                                ReceivedPoints="ReceivedPoints" />
                <MudAlert Severity="Severity.Info">
                    <MudText Typo="Typo.h5">@(_question?.Order + 1). @_question?.QuestionText</MudText>
                </MudAlert>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Justify="Justify.SpaceEvenly">
                    @foreach (var (answer, index) in _question?.Answers.WithIndex()
                   ?? Array.Empty<GameAnswerDto>().WithIndex())
                    {
                        <AnswerOptionControl 
                            Answer="answer" 
                            OtherReceivedPoints="OtherReceivedPoints"
                            ReceivedPoints="ReceivedPoints" 
                            SendAnswer="SendAnswer" 
                            AnsweredState="AnsweredState" 
                            Disabled="AnsweredState || DisableToAnswer" />
                    }
                </MudGrid>
            </MudCardContent>
            <MudCardActions>
                <GameTimerControl />
                @if (AnsweredState && !HideNextButton)
                {
                    <MudFab EndIcon="@Icons.Material.Filled.NavigateNext"
                        Label="next"
                        Class="ma-1"
                        @onclick="NextQuestion" />
                }
            </MudCardActions>
        </MudCard>
    </LoadingWrapper>
}


@code {
    GameQuestionDto? _question;

    [Parameter]
    public ReceivedPointsDto? ReceivedPoints { get; set; }

    [Parameter]
    public List<ReceivedPointsDto>? OtherReceivedPoints { get; set; }

    [Parameter]
    public bool AnsweredState { get; set; }

    [Parameter]
    public Func<Task<GameQuestionDto?>>? GetQuestionDelegate { get; set; }

    [Parameter]
    public Func<string, Task>? SendAnswerDelegate { get; set; }

    [Parameter]
    public bool HideNextButton { get; set; }

    [Parameter]
    public bool HidePlayerState { get; set; }

    [Parameter]
    public bool DisableToAnswer { get; set; }

    [Parameter]
    public bool Hide { get; set; }

    async Task GetQuestion()
    {
        _question = null;
        StateHasChanged();

        if (GetQuestionDelegate == null)
        {
            throw new ArgumentNullException();
        }

        _question = await GetQuestionDelegate();

        if (_question == null)
        {
            PlayGameService.InvokeOnQuizEnded();
            return;
        }

        StateHasChanged();
    }

    public async Task NextQuestion()
    {
        await GetQuestion();
        StateHasChanged();
    }

    async Task SendAnswer(GameAnswerDto answer)
    {
        if (SendAnswerDelegate != null)
        {
            await SendAnswerDelegate(answer.Id);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await NextQuestion();
    }

    public void Dispose()
    {
        PlayGameService.InvokeOnQuizEnded();
    }
}