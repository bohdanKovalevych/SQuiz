@page "/play"
@layout PlayerLayout
@using SQuiz.Client.Interfaces
@using SQuiz.Client.Pages.Game.GameCoreComponents
@using SQuiz.Client.Services
@using SQuiz.Shared.Dtos.Game
@using SQuiz.Shared.Extensions
@using System.Net
@using SQuiz.Shared.Interfaces

@implements IDisposable
@inject PublicClient Http
@inject NavigationManager Nav
@inject IPlayGameService PlayGameService
@inject ISessionStorageService SessionStorage


<PlayGameComponent 
    GetQuestionDelegate="GetQuestion"
    AnsweredState="_answeredState"
    DisableToAnswer="false"
    HideNextButton="false"
    HidePlayerState="false"/>

@code {
    bool _answeredState;

    public async Task<GameQuestionDto?> GetQuestion()
    {
        var game = await SessionStorage.GetItemAsync<RegularGameOptionDto>(Constants.SessionStorageKey.Game);
        var response = await Http.Client.GetAsync($"Games/{game?.ShortId}/questions");

        if (response.StatusCode == HttpStatusCode.NoContent && game != null)
        {
            Nav.NavigateTo($"/gameScores/{game.ShortId}");
            return null;
        }

        _answeredState = false;
        StateHasChanged();
        var question = await response.Content.ReadFromJsonAsync<GameQuestionDto>();
        return question;
    }

    async Task OnAnswered(SendAnswerDto answer)
    {
        var response = await Http.Client.PostAsJsonAsync("Games/answers", answer);
        var points = await response.Content.ReadFromJsonAsync<ReceivedPointsDto>();
        _answeredState = true;
        PlayGameService.ReceivePoints(points);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        PlayGameService.OnAnswered += OnAnswered;
    }

    public void Dispose()
    {
        PlayGameService.OnAnswered -= OnAnswered;
    }
}