@page "/previewQuestion/{backUrl}"
@layout PlayerLayout
@using SQuiz.Client.Interfaces
@using SQuiz.Client.Pages.Game.GameCoreComponents
@using SQuiz.Shared.Dtos.Game
@using SQuiz.Shared.Dtos.Quiz
@using SQuiz.Shared.Interfaces
@inject NavigationManager Nav
@inject IPlayGameService PlayGameService
@inject ISessionStorageService Storage
@inject IPointsCounter PointsCounter
@implements IDisposable

<PreviewBase BackUrl="@BackUrl">
    <PlayGameComponent GetQuestionDelegate="GetQuestion" />
</PreviewBase>

@code {
    QuestionDto? _question;

    [Parameter]
    public string? BackUrl { get; set; }


    async Task<GameQuestionDto> GetQuestion()
    {
        var question = await Storage.GetItemAsync<QuestionDto>(Constants.SessionStorageKey.PreviewQuestion);
        var gameQuestion = new GameQuestionDto()
        {
            AnsweringTime = question.AnsweringTime,
            Points = question.Points,
            Order = question.Order,
            QuestionText = question.QuestionText,
            Answers = question.Answers
            .OrderBy(x => x.Order)
            .Select(x => new GameAnswerDto()
            {
                AnswerText = x.AnswerText,
                Id = $"{x.Order}",
                Order = x.Order
            })
            .ToList()
        };

        return gameQuestion;
    }

    Task OnAnswered(SendAnswerDto answer)
    {
        var parsed = int.TryParse(answer.AnswerId, out var order);
        var points = new ReceivedPointsDto()
        {
            CorrectAnswerId = _question?.CorrectAnswerIndex.ToString(),
            SelectedAnswerId = answer.AnswerId
        };

        if (parsed && _question?.CorrectAnswerIndex == order)
        {
            points.CurrentPoints = PointsCounter.GetPoints(answer.TimeToSolve, _question.AnsweringTime, _question.Points);
            points.TotalPoints = points.CurrentPoints;
        }

        PlayGameService.ReceivePoints(points);
        
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        _question = await Storage.GetItemAsync<QuestionDto>(Constants.SessionStorageKey.PreviewQuestion);

        if (_question == null)
        {
            Nav.NavigateTo(BackUrl);
            return;
        }

        PlayGameService.OnAnswered += OnAnswered;
    }


    public void Dispose()
    {
        PlayGameService.OnAnswered -= OnAnswered;
    }
}