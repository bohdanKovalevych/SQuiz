@using SQuiz.Shared.Dtos.Game
@using SQuiz.Shared.Dtos.Quiz
@inject HttpClient Http
@inject NavigationManager Nav

<MudCard Elevation="20">
    <MudCardHeader>
        <MudPaper>
            @if (GameOption != null)
            {
                <MudText Typo="Typo.subtitle1">Edit game with id @GameOption.ShortId</MudText>
            }
            else
            {
                <MudText Typo="Typo.subtitle1">Start a new game</MudText>
            }
        </MudPaper>
    </MudCardHeader>
    <MudCardContent >
        <MudPaper Class="d-flex flex-column gap-2 pa-2">
            @if (ErrorMessage != null)
            {
                <MudAlert Severity="Severity.Error">@ErrorMessage</MudAlert>
            }
            
            <MudSelect Variant="Variant.Outlined"
                        T="string"
                        @bind-Value="Model.QuizId"
                        Label="Choose quiz">
                @foreach (var quiz in QuizOptions)
                {
                    <MudSelectItem Value="@quiz.Id">@quiz.Name</MudSelectItem>
                }
            </MudSelect>

            <MudTextField T="string" Variant="Variant.Outlined" Label="Name for quiz game" @bind-Text="@Model.Name" />
            <div class="d-flex flex-row gap-2">
                <MudDatePicker Variant="Variant.Outlined" Label="Date start" @bind-Date="StartDate" />
                <MudTimePicker Variant="Variant.Outlined" Label="Time start" @bind-Time="StartTime" />
            </div>
            <div class="d-flex flex-row gap-2">
                <MudDatePicker Variant="Variant.Outlined" Label="Date end" @bind-Date="EndDate" />
                <MudTimePicker Variant="Variant.Outlined" Label="Time end" @bind-Time="EndTime" />
            </div>
        </MudPaper>
    </MudCardContent>
    <MudCardActions>
        <MudPaper>
            <MudButton Variant="Variant.Filled" @onclick="StartGame">
                @(GameOption != null
                    ? "Edit"
                    : "Start")
            </MudButton>
        </MudPaper>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public List<QuizOptionDto> QuizOptions { get; set; } = new List<QuizOptionDto>();

    [Parameter]
    public RegularGameOptionDto? GameOption { get; set; }

    [Parameter]
    public EventCallback OnSubmitted { get; set; }

    public string? ErrorMessage;

    public StartRegularGameDto Model { get; set; } = new StartRegularGameDto();

    public TimeSpan? StartTime { get; set; } = DateTime.Now.AddSeconds(0).AddMilliseconds(0).TimeOfDay;
    public DateTime? StartDate { get; set; } = DateTime.Now;
    public TimeSpan? EndTime { get; set; } = DateTime.Now.AddSeconds(0).AddMilliseconds(0).TimeOfDay;
    public DateTime? EndDate { get; set; } = DateTime.Now.AddDays(1);

    public async Task StartGame()
    {
        ErrorMessage = null;

        if (Model.QuizId == null)
        {
            ErrorMessage = "Quiz is required";
            return;
        }

        if (Model.Name == null)
        {
            ErrorMessage = "Game name is required";
            return;
        }

        Model.DateStart = AddTimeToDate(StartDate, StartTime);
        Model.DateEnd = AddTimeToDate(EndDate, EndTime);
        var response = await Http.PutAsJsonAsync($"ManageGames/{Model.QuizId}", Model);

        if (response.IsSuccessStatusCode)
        {
            await OnSubmitted.InvokeAsync();
        }
    }

    private DateTimeOffset? AddTimeToDate(DateTime? date, TimeSpan? time)
    {
        if (time is TimeSpan notNullTime && date is DateTime notNullDate)
        {
            return new DateTimeOffset(
                notNullDate.Year,
                notNullDate.Month,
                notNullDate.Day,
                notNullTime.Hours,
                notNullTime.Minutes,
                0,
                DateTimeOffset.Now.Offset);
        }

        return null;
    }

    protected override void OnParametersSet()
    {
        if (QuizOptions != null && QuizOptions.Any())
        {
            Model.QuizId = QuizOptions[0].Id;
        }

        if(GameOption != null)
        {
            Model.QuizId = GameOption.QuizId;
            Model.Id = GameOption.Id;
            Model.ShortId = GameOption.ShortId;
            Model.DateEnd = GameOption.EndDate;
            Model.DateStart = GameOption.StartDate;
            Model.Name = GameOption.Name;
            StartDate = Model.DateStart?.Date;
            EndDate = Model.DateEnd?.Date;
            StartTime = GameOption.StartDate?.TimeOfDay;
            EndTime = GameOption.EndDate?.TimeOfDay;
        }
    }
}