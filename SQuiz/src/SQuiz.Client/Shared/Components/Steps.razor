@using SQuiz.Shared.Extensions

<style>
    .my-item {
        max-width: 500px;
        min-width: 120px;
        text-align: center;
        margin: 0 5px;
    }

    .my-line {
        position: relative;
        overflow: visible;
    }

    .my-line::before {
        position: absolute;
        left: -10%;
        content: "";
        margin-top: 22px;
        height: 4px;
        min-width: 120%;
        flex-grow: 2;
        z-index: 1;
        transition: all .2s;
        background: linear-gradient(0.25turn, var(--mud-palette-success) 50%, var(--mud-palette-primary) 50%, var(--mud-palette-primary) 50%, var(--mud-palette-success) 50%);
    }

    .my-line-active::before {
        z-index: 2;
        background: linear-gradient(0.25turn, var(--mud-palette-success), var(--mud-palette-primary) 10%, var(--mud-palette-primary) 90%, var(--mud-palette-success));
    }

    .header-steps {
        position: relative;
        padding-bottom: 10px;
        max-width: 875px;
        overflow-x: auto;
    }

    @@media screen and (max-width: 1200px) {
        .header-steps {
            max-width: 600px;
        }
    }

    @@media screen and (max-width: 670px) {
        .header-steps {
            max-width: 400px;
        }
    }
    
</style>

<MudCard Class="@Class">
    <MudCardHeader Class="d-flex flex-column">
        <MudText Typo="Typo.h4">
            @Title
        </MudText>
        @SubHeaderContent
        <div class="d-flex align-items-baseline header-steps mx-auto">
            @foreach (var (item, i) in StepItems.WithIndex())
            {
                if (!item.ShowInNavigation)
                {
                    continue;
                }
                var isActive = item == ActiveStepItem;
                var colorBtn = isActive ? Color.Primary : Color.Success;
                var lineClass = isActive ? "my-line my-line-active" : "my-line";
                
                <div class="my-item">
                    <div class="@lineClass">
                        <MudFab Class="z-100" Color="colorBtn" @onclick=@(() => ActivateStepItem(item))
                            Label=@($"{i + 1}")
                            Title="@item.Title">
                        </MudFab>
                    </div>
                    <MudText>@item.Title</MudText>
                </div>
            }
        </div>
    </MudCardHeader>
    <MudCardContent>
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </MudCardContent>
</MudCard>



@code {
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public RenderFragment? SubHeaderContent { get; set; }

    public StepItem? ActiveStepItem { get; set; }

    public IList<StepItem> StepItems = new List<StepItem>();    

    public void NavigateTo(int index)
    {
        ActivateStepItem(StepItems[index]);
    }

    public void AddStepItem(StepItem stepItem)
    {
        StepItems.Add(stepItem);
        if (StepItems.Count == 1)
        {
            ActiveStepItem = stepItem;
        }
        StepItems = StepItems.OrderBy(x => x.Order).ToList();
        StateHasChanged();
    }

    public void RemoveByIndex(int index)
    {
        StepItems.RemoveAt(index);

        StateHasChanged();
    }

    public void ActivateStepItem(StepItem item) 
    {
        ActiveStepItem = item;
        StateHasChanged();
    }
}