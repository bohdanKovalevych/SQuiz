@using SQuiz.Shared.Extensions
@implements IDisposable

<style>
    .my-line:last-of-type {
        display: none;
    }
</style>

<div class="card">
    <div class="card-header">
        <button class="btn btn-close float-end"></button>
        <p>
            <h3>@Title</h3>
        </p>
        @SubHeaderContent
        <div style="max-width: 100%; overflow-x: scroll">
            <div class="d-flex align-items-center list-group-horizontal">
                
                @foreach (var (item, i) in StepItems.WithIndex())
                {
                    if (!item.ShowInNavigation)
                    {
                        continue;
                    }
                    var classes = item == ActiveStepItem ? "btn-outline-primary" : "btn-outline-secondary";
                        
                    <div class="list-group-item">
                        <button style="border-radius: 20px" class="btn @classes" @onclick=@(() => ActivateStepItem(item))>@(i + 1)</button>
                        <span class="small text-truncate">@item.Title</span>
                        <div class="flex-grow-1 my-line" style="border: black 1px solid; border-radius: 3px; height: 5px; min-width: 10px; margin-right: 5px; margin-left: 5px"></div>
                    </div>
                }
                
            </div>
        </div>
        
    </div>
    <div class="card-body">
        <div class="row d-flex">
            <div class="col-lg-11 col-12">
                <div>
                    <CascadingValue Value="this">
                        @ChildContent
                    </CascadingValue>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment? SubHeaderContent { get; set; }

    public StepItem ActiveStepItem { get; set; }

    public IList<StepItem> StepItems = new List<StepItem>();    

    public void NavigateTo(int index)
    {
        ActivateStepItem(StepItems[index]);
    }

    public void AddStepItem(StepItem stepItem)
    {
        StepItems.Add(stepItem);
        if (StepItems.Count == 1)
        {
            ActiveStepItem = stepItem;
        }
        StepItems = StepItems.OrderBy(x => x.Order).ToList();
        StateHasChanged();
    }

    public void RemoveByIndex(int index)
    {
        StepItems.RemoveAt(index);

        StateHasChanged();
    }

    public void ActivateStepItem(StepItem item) 
    {
        ActiveStepItem = item;
        StateHasChanged();
    }

    public void Dispose() 
    {
        StepItems = new List<StepItem>();
    }
}