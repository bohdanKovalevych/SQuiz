@using SQuiz.Shared.Dtos.Quiz

@inject HttpClient Http

Quiz table

@if(Items == null)
{
    <span>Loading...</span>
}
else
{
    @if (ShowModalToDelete)
    {
        <p>Are you sure you want to delete quiz with id @SelectedQuiz?.ShortId and name @SelectedQuiz?.Name ?</p>
        <button @onclick="RemoveSelectedQuiz" class="btn btn-primary">Yes</button>
        <button @onclick=@(() => {SelectedQuiz = null; ShowModalToDelete = false; StateHasChanged();}) class="btn btn-secondary">No</button>
    }

    <table class="table table-striped table-bordered">
        <thead>
            <tr class="sticky-lg-top">
                <th></th>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Questions Count</th>
                <th scope="col">Is public</th>
                <th scope="col">Description</th>
                <th scope="col">Date updated</th>
                <th scope="col">Date created</th>
            </tr>
        </thead>
        
        <tbody>
            @foreach(var item in Items) 
            {
                <tr>
                    <td scope="row">
                        <a class="oi oi-pencil" href="manage-quiz/@item.Id"></a>
                        <button class="btn btn-danger oi oi-trash" @onclick=@(() => OpenModalToRemove(item))></button>
                    </td>
                    <td >@item.ShortId</td>
                    <td >@item.Name</td>
                    <td >@item.QuestionsCount</td>
                    <td >@item.IsPublic</td>
                    <td ><span>@item.Description</span> </td>
                    <td >@item.DateUpdated</td>
                    <td >@item.DateCreated</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public List<QuizOptionDto>? Items { get; set; }
    public bool ShowModalToDelete { get; set; }
    public QuizOptionDto? SelectedQuiz { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Items = await Http.GetFromJsonAsync<List<QuizOptionDto>>("Quizzes");
    }

    public void OpenModalToRemove(QuizOptionDto quiz)
    {
        ShowModalToDelete = true;
        SelectedQuiz = quiz;
        StateHasChanged();
    }

    public async Task RemoveSelectedQuiz()
    {
        if (SelectedQuiz != null)
        {
            var response = await Http.DeleteAsync($"Quizzes/{SelectedQuiz.Id}");

            if (response.IsSuccessStatusCode)
            {
                ShowModalToDelete = false;
                Items?.Remove(SelectedQuiz);
                SelectedQuiz = null;
            }
        }
    }
}