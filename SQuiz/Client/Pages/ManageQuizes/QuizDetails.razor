@page "/manage-quiz/{IdQUiz}"
@using Microsoft.AspNetCore.WebUtilities
@using SQuiz.Client.Pages.EditQuizSteps
@using SQuiz.Shared.Dtos.Quiz
@using SQuiz.Client.Shared.Components
@inject HttpClient Http
@inject NavigationManager Nav
@implements IDisposable

<LoadingWrapper WaitFor="@Quiz">
    <div class="container">
        <a class="m-2 link-secondary" href="/">Back to table</a>
        
        @if(IsEditingMode)
        {
            <a class="m-2 link-secondary" href="@(Nav.GetUriWithQueryParameter(EDIT_KEY, "false"))">Back to view details</a>
            <UpdateQuizSteps Quiz="Quiz"></UpdateQuizSteps>
        }
        else 
        {
            <a class="m-2 link-secondary" href="@(Nav.GetUriWithQueryParameter(EDIT_KEY, "true"))">Edit</a>
            <div class="list-group">
                <div class="list-group-item">
                    <div class="row">
                        <div class="col-2">Name</div>
                        <div class="col">@Quiz.Name</div>
                    </div>
                </div>
                <div class="list-group-item">
                    <div class="row">
                        <div class="col-2">Description</div>
                        <div class="col">@Quiz.Description</div>
                    </div>
                </div>
                <div class="list-group-item">
                    <div class="row">
                        <div class="col-2">Is public</div>
                        <div class="col">@Quiz.IsPublic</div>
                    </div>
                </div>
                <div class="list-group-item">
                    Questions
                    <div class="list-group">
                        @foreach (var question in Quiz.Questions)
                        {
                            <div class="list-group-item">
                                <div>
                                    @question.QuestionText
                                </div>
                                <div>
                                    Answering Time: @question.AnsweringTime.ToString()
                                </div>
                                <div>
                                    Answering Points: @question.Points.ToString()
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</LoadingWrapper>

@code {
    [Parameter]
    public string? IdQuiz { get; set; }

    private QuizDetailsDto? Quiz { get; set; }

    private bool IsEditingMode { get; set; }

    const string EDIT_KEY = "edit";

    protected override async Task OnInitializedAsync()
    {
        Nav.LocationChanged += LocationChanged;

        if (string.IsNullOrEmpty(IdQuiz))
        {
            Nav.NavigateTo(Nav.BaseUri);
            return;
        }

        Quiz = await Http.GetFromJsonAsync<QuizDetailsDto>($"Quizzes/{IdQuiz}");
        CheckEditMode();
    }

    public void Dispose()
    {
        Nav.LocationChanged -= LocationChanged;
    }

    public void LocationChanged(object? sender, LocationChangedEventArgs e) 
    {
        CheckEditMode();
    }

    public void CheckEditMode()
    {
        var uri = new Uri(Nav.Uri);
        var foundQueryParameter = QueryHelpers.ParseQuery(uri.Query)
            .TryGetValue(EDIT_KEY, out var valueFromQueryString);

        IsEditingMode = foundQueryParameter && valueFromQueryString == "true";

        StateHasChanged();
    }
}