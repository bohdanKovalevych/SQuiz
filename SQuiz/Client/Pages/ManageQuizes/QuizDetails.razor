@page "/manage-quiz/{IdQUiz}"
@using Microsoft.AspNetCore.WebUtilities
@using SQuiz.Client.Pages.EditQuizSteps
@using SQuiz.Shared.Dtos.Quiz
@using SQuiz.Client.Shared.Components
@using SQuiz.Shared.Extensions
@inject HttpClient Http
@inject NavigationManager Nav
@implements IDisposable

<LoadingWrapper WaitFor="@Quiz">
    <MudGrid>
        <MudItem xs="12">
            <MudFab Class="mr-2" Color="Color.Dark" Href="/" Icon="@Icons.Material.Filled.ArrowBack" />
            @if(IsEditingMode) 
            {
                <MudFab Color="Color.Info" Icon="@Icons.Material.Filled.Info" Href="@(Nav.GetUriWithQueryParameter(EDIT_KEY, "false"))"/> 
            }
            else 
            {
                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Href="@(Nav.GetUriWithQueryParameter(EDIT_KEY, "true"))" />
            }
        </MudItem>
        
        @if(IsEditingMode)
        {
            <MudItem xs="12" >
                <UpdateQuizSteps Quiz="Quiz"></UpdateQuizSteps>
            </MudItem>
        }
        else 
        {
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-2 mud-height-full">
                    <MudText Typo="Typo.h6">Name: @Quiz?.Name</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-2 mud-height-full">
                    <MudText Typo="Typo.h6">Description: @Quiz?.Description</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-2 mud-height-full">
                    <MudText Typo="Typo.h6">Is public: @Quiz?.IsPublic</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" Class="pa-2">
                <MudText Typo="Typo.h4">Questions</MudText>
                <MudList Clickable>
                    @foreach (var (question, i) in Quiz.Questions.WithIndex())
                    {
                        <MudListItem Value="@question">
                            <div class="d-flex flex-row gap-2 pa-2">
                                <MudAvatar>
                                    @(i + 1)
                                </MudAvatar>
                                <div>
                                    <MudText Typo="Typo.subtitle2">@question.QuestionText</MudText>
                                    <MudText Typo="Typo.subtitle2">
                                        Answering Time: @question.AnsweringTime.ToString()
                                    </MudText>
                                    <MudText Typo="Typo.subtitle2">
                                        Answering Points: @question.Points.ToString()
                                    </MudText>
                                </div>
                            </div>
                        </MudListItem>
                        <MudDivider/>
                    }
                </MudList>
            </MudItem>
        }
    </MudGrid>
</LoadingWrapper>

@code {
    [Parameter]
    public string? IdQuiz { get; set; }

    private QuizDetailsDto? Quiz { get; set; }

    private bool IsEditingMode { get; set; }

    const string EDIT_KEY = "edit";

    protected override async Task OnInitializedAsync()
    {
        Nav.LocationChanged += LocationChanged;

        if (string.IsNullOrEmpty(IdQuiz))
        {
            Nav.NavigateTo(Nav.BaseUri);
            return;
        }

        Quiz = await Http.GetFromJsonAsync<QuizDetailsDto>($"Quizzes/{IdQuiz}");
        CheckEditMode();
    }

    public void Dispose()
    {
        Nav.LocationChanged -= LocationChanged;
    }

    public void LocationChanged(object? sender, LocationChangedEventArgs e) 
    {
        CheckEditMode();
    }

    public void CheckEditMode()
    {
        var uri = new Uri(Nav.Uri);
        var foundQueryParameter = QueryHelpers.ParseQuery(uri.Query)
            .TryGetValue(EDIT_KEY, out var valueFromQueryString);

        IsEditingMode = foundQueryParameter && valueFromQueryString == "true";

        StateHasChanged();
    }
}