@using SQuiz.Client.Shared.Components
@using SQuiz.Shared.Dtos.Quiz
@using SQuiz.Shared.Extensions
@inject ISessionStorageService Storage
@inject NavigationManager Nav

<StepItem Title="Review details" Order=@(Model.Questions.Count + 3)>
    <MudFab
        Class="ma-1"
        Label="Preview all questions"
        StartIcon="@Icons.Material.Filled.Preview"
        @onclick="GoToPreview"/>
    <MudGrid>
        <MudItem >
            <MudList Clickable>
                <MudListSubheader>
                    <MudPaper Class="pa-4">
                        <MudText>Quiz Name: @Model.Name</MudText>
                        <MudText>Quiz Description: @Model.Description</MudText>
                        <MudText>Is public: @Model.IsPublic</MudText>
                        <MudText>Number of questions: @Model.Questions.Count</MudText>
                    </MudPaper>
                </MudListSubheader>
                @foreach(var q in Model.Questions.OrderBy(x => x.Order))
                {
                    <MudListItem >
                        <ChildContent>
                            <ValidationErrorMessage Model="Model" For=@($"Questions[{q.Order}].QuestionText") ValidationResult="Parent.ValidationResult"></ValidationErrorMessage>
                            <span class="small">@(q.Order + 1). </span>
                            <span>@q.QuestionText</span>    
                        </ChildContent>
                        <NestedList>
                            @foreach (var a in q.Answers.OrderBy(x => x.Order))
                            {
                                <MudListItem>
                                    <div class="m-3">
                                        <ValidationErrorMessage Model="Model" For=@($"Questions[{q.Order}].Answers[{a.Order}].AnswerText") ValidationResult="Parent.ValidationResult"></ValidationErrorMessage>
                                    </div>
                                    <div class="col-12 m-3">
                                        <span class="alert @(a.Order == q.CorrectAnswerIndex ? "green-text" : "")">
                                            <span class="small">@((char)('a' + a.Order)).</span>
                                            <span>@a.AnswerText</span>
                                        </span>
                                    </div>
                                </MudListItem>
                            }
                        </NestedList>
                    </MudListItem>
                }
            </MudList>
        </MudItem>
    </MudGrid>
    <MudButton Variant="Variant.Filled" Class="ma-3" Color="Color.Primary" @onclick="Parent.Save">Save</MudButton>    
</StepItem>

@code {
    [CascadingParameter]
    public QuizSteps Parent { get; set; }

    public EditQuizDto Model => Parent.Model;

    public EditQuizDto? InitialModel => Parent.InitialModel;

    async Task GoToPreview()
    {
        await Parent.SaveCurrentState();

        await Storage.SetItemAsync(Constants.SessionStorageKey.PreviewAllQuestions, Model);
        Nav.NavigateTo($"previewAllQuestions/{Parent.GetBackUrl}");
    }
}