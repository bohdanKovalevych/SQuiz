@using SQuiz.Client.Shared.Components
@using SQuiz.Shared.Dtos.Game
@using SQuiz.Shared.Dtos.Quiz
@using SQuiz.Shared.Extensions
@using SQuiz.Shared.Models

@inject ISessionStorageService Storage
@inject NavigationManager Nav

<StepItem Title="@Title" Order=@(QuestionIndex + 2)>
    <MudFab 
        Color="Color.Default"
        Label="Manage Questions"
        @onclick="BackToManageQuestions"/>
    <MudFab 
        Class="ml-2"
        Label="Preview question"
        Icon="@Icons.Material.Filled.Preview"
        @onclick="GoToPreview" />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="8" md="6">
            <MudPaper Class="pa-4 mud-height-full">
                <ValidationErrorMessage Model="Model" For=@($"Questions[{QuestionIndex}].QuestionText") ValidationResult="Parent.ValidationResult"></ValidationErrorMessage>
                <MudTextField T="string" Label="Question Text *" Variant="Variant.Outlined" @bind-Text="Question.QuestionText"/>
                <MudSelect T="Question.ANSWERING_TIME" Label="Answering Time" @bind-Value="Question.AnsweringTime">
                    @foreach (var answeringTime in Enum.GetValues<Question.ANSWERING_TIME>())
                    {
                        <MudSelectItem  Value="@answeringTime">
                            @answeringTime.ToString()
                        </MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="Question.POINTS" Label="Points" @bind-Value="Question.Points">
                    @foreach (var points in Enum.GetValues<Question.POINTS>())
                    {
                        <MudSelectItem Value="@points">
                            @points.ToString()
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudPaper>
        </MudItem>
        @if (SelectedAnswer != null)
        {
            var index = SelectedAnswer.Order;
            var letter = (char)('a' + index);
            var label = $"Text for variant {letter}";
            <MudItem xs="12" sm="4">
                <MudPaper Class="px-2 pt-12 pb-2 mud-height-full" Style="position: relative">
                    <MudTextField T="string" Label="@label" Variant="Variant.Outlined" @ref="textField" @bind-Text="SelectedAnswer.AnswerText"/>
                    <MudFab Icon="@Icons.Material.Filled.Close" Size="Size.Small" Style="position: absolute; right: 5px; top: 5px" @onclick=@(() => SelectedAnswer = null) />
                </MudPaper>
            </MudItem>
        }
        <MudItem xs="12" sm="8" md="7">
            <MovableList 
                Items="Question.Answers"
                AddItemDelegate="AddAnswer"
                Context="answer"
                Clickable="true"
                @bind-SelectedValue="SelectedAnswer"
                Header=@($"Answers ({(char) ('a' + Question.CorrectAnswerIndex)} is correct)")
                OnReorder="new EventCallback<MudItemDropInfo<AnswerDto>>(this, OnReorder)">
                <ItemTemplate>
                    <MudPaper Elevation="0" Class="pl-3 d-flex flex-row align-center gap-2 flex-grow-1">
                        <MudCheckBox 
                            T="bool"
                            Checked="answer?.Order == Question.CorrectAnswerIndex"
                            CheckedChanged=@(isChecked => SetCorrect(answer, isChecked))
                            Label=@($"{(char)('a' + answer.Order)}. ") />
                        <MudText>@answer.AnswerText</MudText>
                        <ValidationErrorMessage Model="Model" For=@($"Questions[{QuestionIndex}].Answers[{Question.Answers.IndexOf(answer)}].AnswerText") ValidationResult="Parent.ValidationResult"/> 
                    </MudPaper>
                </ItemTemplate>
            </MovableList>
        </MudItem>
    </MudGrid>
</StepItem>

@code {
    [CascadingParameter]
    public QuizSteps Parent { get; set; }

    MudTextField<string>? textField;

    [Parameter]
    public QuestionDto Question { get; set; }

    private AnswerDto? _selectedAnswer;
    public AnswerDto? SelectedAnswer 
    { 
        get => _selectedAnswer; 
        set 
        {
            _selectedAnswer = value;
            textField?.FocusAsync();
        }
    }

    public EditQuizDto Model => Parent.Model;

    public EditQuizDto? InitialModel => Parent.InitialModel;

    public int QuestionIndex => Model.Questions.IndexOf(Question);

    public string Title => $"Question {QuestionIndex + 1}";

    protected override void OnInitialized()
    {
        if (Question.Answers.Count == 0) 
        {
            Question.Answers.Add(new AnswerDto());
            Question.Answers.Add(new AnswerDto());
        }
    }

    public void BackToManageQuestions() 
    {
        Parent.NavigateTo(1);
    }

    public AnswerDto AddAnswer() 
    {
        return new AnswerDto() { Order = Question.Answers.Count };
    }

    public void OnReorder(MudItemDropInfo<AnswerDto> dropInfo)
    {
        if (Question.CorrectAnswerIndex == dropInfo.IndexInZone)
        {
            Question.CorrectAnswerIndex = dropInfo.Item.Order;
        }
        else if (Question.CorrectAnswerIndex == dropInfo.Item.Order)
        {
            Question.CorrectAnswerIndex = dropInfo.IndexInZone;
        }

        Parent.Validate();
    }

    public void SetCorrect(AnswerDto answer, bool isChecked)
    {
        if (isChecked)
        {
            Question.CorrectAnswerIndex = answer.Order;
        }
    }

    async Task GoToPreview()
    {
        await Parent.SaveCurrentState();

        await Storage.SetItemAsync(Constants.SessionStorageKey.PreviewQuestion, Question);
        Nav.NavigateTo($"previewQuestion/{Parent.GetBackUrl}");
    }
}