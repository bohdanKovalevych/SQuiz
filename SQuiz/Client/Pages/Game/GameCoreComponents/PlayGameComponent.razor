@using SQuiz.Client.Interfaces
@using SQuiz.Client.Pages.Game.Animations
@using SQuiz.Shared.Dtos.Game
@using SQuiz.Shared.Extensions

@implements IDisposable
@inject IPlayGameService PlayGameService

<style>
    .mud-button-root:disabled {
        color: white !important;
    }
    .mud-button-root:hover {
        color: var(--mud-palette-success) !important;
    }
    .rounded {
        border-radius: 10px !important;
    }
</style>

<PrepareForQuestionAnimation />
<ShowScoreForQuestionAnimation />
<MudCard>
    <MudCardHeader Class="flex-column align-stretch gap-2">
        <MudAlert Severity="Severity.Warning" Icon="@Icons.Material.Filled.ChildCare">
            <MudText Typo="Typo.h5" >Total points: @(_receivedPoints?.TotalPoints ?? 0) </MudText>
        </MudAlert>
        <MudAlert Severity="Severity.Info">
            <MudText Typo="Typo.h5" >@(_question?.Order + 1). @_question?.QuestionText</MudText>
        </MudAlert>
        @if (_answeredState)
        {
            <MudAlert Severity=@(_receivedPoints.CurrentPoints > 0 ? Severity.Success : Severity.Error)>
                You got @_receivedPoints.CurrentPoints points.
            </MudAlert>
        }
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Justify="Justify.SpaceEvenly">
            @foreach (var (answer, index) in _question?.Answers.WithIndex()
                ?? new List<GameAnswerDto>().WithIndex())
            {
                <AnswerOptionControl Answer="answer" ReceivedPoints="_receivedPoints" SendAnswer="SendAnswer" AnsweredState="_answeredState"/>
            }
        </MudGrid>
    </MudCardContent>
    <MudCardActions>
        <GameTimer/>
        @if (_answeredState)
        {
            <MudFab EndIcon="@Icons.Material.Filled.NavigateNext"
                Label="next"
                Class="ma-1"
                @onclick="NextQuestion" />
        }
    </MudCardActions>
</MudCard>

@code {
    GameQuestionDto? _question;
    ReceivedPointsDto? _receivedPoints;
    bool _answeredState;

    [Parameter]
    public Func<Task<GameQuestionDto?>> GetQuestionDelegate { get; set; }

    void OnPrepared()
    {
        PlayGameService.StartTimer();
    }

    void OnReceivedPoints(ReceivedPointsDto points)
    {
        _receivedPoints = points;
        _answeredState = true;
        StateHasChanged();
    }

    async Task GetQuestion()
    {
        _question = null;
        StateHasChanged();
        _question = await GetQuestionDelegate();

        if (_question == null)
        {
            PlayGameService.EndQuiz();
            return;
        }

        PlayGameService.InitQuestion(_question);
        StateHasChanged();
    }

    async Task NextQuestion()
    {
        await GetQuestion();
        PlayGameService.DelayToPrepareForQuestion();
        _answeredState = false;
        StateHasChanged();
    }

    async Task SendAnswer(GameAnswerDto answer)
    {
        await PlayGameService.SendAnswer(answer.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        PlayGameService.OnPrepared += OnPrepared;
        PlayGameService.OnReceivedPoints += OnReceivedPoints;
        await GetQuestion();
        PlayGameService.DelayToPrepareForQuestion();
    }

    public void Dispose()
    {
        PlayGameService.OnPrepared -= OnPrepared;
        PlayGameService.OnReceivedPoints -= OnReceivedPoints;
        PlayGameService.EndQuiz();
    }
}