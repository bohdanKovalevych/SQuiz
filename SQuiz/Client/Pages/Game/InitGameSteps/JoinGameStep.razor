@using SQuiz.Client.Interfaces
@using SQuiz.Client.Shared.Components
@using SQuiz.Client.Services
@using SQuiz.Shared.Dtos.Game

@inject ICookieStoreService Cookies
@inject PublicClient Http
@inject IInitGameService InitGameService

<LoadingWrapper WaitFor="Game">
    <div class="container card-group">
        <div class="card">
            <div class="card-header">
                Welcome to "@Game?.Name" game
            </div>
            <div class="card-body">
                <div>
                    @if (ExistingPlayerName != null)
                    {
                        <div class="alert alert-info">
                            Are you '@(ExistingPlayerName)'? If yes, you may
                            <button class="btn btn-success" @onclick="JoinAs">rejoin</button>
                        </div>
                    }
                    <div class="alert-danger">@ErrorMessage</div>
                    <div class="input-group">
                        <label class="m-1">To join write your name</label>
                        <input class="form-control m-1" type="text" @bind-value="Name"/>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary m-1" @onclick="JoinGame">Join</button>
            </div>
        </div>
    </div>
</LoadingWrapper>

@code {
    [Parameter]
    public GameOptionDto? Game { get; set; }

    public string? Name { get; set; }

    public string? ExistingPlayerName { get; set; }
    public string? ExisitngPlayerId { get; set; }

    public string? ErrorMessage;

    public async Task JoinAs()
    {
        if (ExisitngPlayerId != null)
        {
            await InitGameService.JoinWithExistingId(ExisitngPlayerId);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var playerId = (await Cookies.GetAsync("playerId"))?.Value;

        if (playerId == null)
        {
            return;
        }

        var playerResponse = await Http.Client.GetAsync($"Games/players/{playerId}");

        if (!playerResponse.IsSuccessStatusCode)
        {
            return;
        }

        var player = await playerResponse.Content.ReadFromJsonAsync<PlayerDto>();

        if (player?.QuizGameId != Game?.Id)
        {
            return;
        }

        ExistingPlayerName = player?.Name;
        ExisitngPlayerId = player?.Id;
    }

    public async Task JoinGame()
    {
        ErrorMessage = null;

        if (Name == null)
        {
            ErrorMessage = "Name is required";
            return;
        }

        await InitGameService.ChoosePlayerName(Name);
    }
}