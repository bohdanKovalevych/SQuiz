@page "/runGame"
@using Microsoft.AspNetCore.Authorization
@using SQuiz.Client.Interfaces
@using SQuiz.Client.Shared.Components
@using SQuiz.Shared.Dtos.Game
@using SQuiz.Shared.Dtos.Quiz

@inject HttpClient Http
@inject NavigationManager Nav
@inject IClipboardService ClipboardService
@attribute [Authorize]


<LoadingWrapper WaitFor="QuizOptions">
    @if (ShowEdit)
    {
        <button class="btn btn-link" @onclick="Hide">Hide</button>
        <UpdateGame QuizOptions="QuizOptions" GameOption="GameOption" OnSubmitted="OnSubmited"></UpdateGame>
    }
    else
    {
        <button class="btn btn-link" @onclick="StartNewGame">Start new game</button>
    }
</LoadingWrapper>

<LoadingWrapper WaitFor="GameOptions">
    <p>
        <h3>My games</h3>
    </p>
    <div class="list-group">
        
        @if (GameOptions?.Count == 0)
        {
            <p>
                There are no quiz games
            </p>
        }

        @foreach(var game in GameOptions)
        {
            <div class="list-group-item">
                <div class="row">
                    <div class="col">
                        <button class="m-1 btn btn-outline-info oi oi-pencil"
                                @onclick=@(() => EditGame(game))></button>
                        <button class="m-1 btn btn-light oi oi-share-boxed"
                                @onclick=@(() => CopyLinkToGame(game.ShortId))></button>
                        @game.Name
                    </div>
                    <div class="col">
                        Code @game.ShortId
                    </div>
                    <div class="col">
                        Starts @game.StartDate
                    </div>
                    <div class="col">
                        Ends @game.EndDate
                    </div>
                </div>
            </div>
        }
    </div>
</LoadingWrapper>

@code {
    public bool ShowEdit;

    public List<QuizOptionDto>? QuizOptions;

    public List<GameOptionDto>? GameOptions;

    public GameOptionDto? GameOption;

    protected override async Task OnInitializedAsync()
    {
        var getQuizzes = Http.GetFromJsonAsync<List<QuizOptionDto>>("Quizzes");
        var getGames = Http.GetFromJsonAsync<List<GameOptionDto>>("ManageGames");

        QuizOptions = await getQuizzes;
        GameOptions = await getGames;
    }

    public async Task OnSubmited()
    {
        await OnInitializedAsync();
        Hide();
    }

    public void Hide()
    {
        ShowEdit = false;
    }

    public void StartNewGame()
    {
        ShowEdit = true;
        GameOption = null;
    }

    public void EditGame(GameOptionDto game)
    {
        ShowEdit = true;
        GameOption = game;
    }

    public async Task CopyLinkToGame(int shortId)
    {
        await ClipboardService.CopyToClipboard($"{Nav.BaseUri}joingame/{shortId}");
    }
}